import {execSync} from 'child_process';
import {readFileSync, writeFileSync} from 'fs';
import {join} from 'path';

/**
 * @param number number
 */
const padStart = number => {
  if (number.toString().length < 2) {
    return `0${number}`;
  }

  return String(number);
};

/**
 *
 * @param {*} envPath string
 * @param {*} envJson Record<string, string>
 */
export const setupEnv = (envPath, envJson) => {
  let infoJsEnv = `
# This file was generated by current env while u start/run application.
# Do not edit this file as changes may cause incorrect behavior and will be lost
# once the code is regenerated.
\n`;
  const data = readFileSync(join('./', envPath), 'utf8');

  if (data) {
    const todayDate = new Date();

    const year = todayDate.getFullYear();

    const month = todayDate.getMonth() + 1;

    const date = todayDate.getDate();

    const hours = todayDate.getHours();

    const minutes = todayDate.getMinutes();

    const APP_BUILD_VERSION = `${year}.${padStart(month)}.${padStart(
      date,
    )}.${padStart(hours)}.${padStart(minutes)}`;

    infoJsEnv += `\nAPP_BUILD_VERSION="${envJson.VERSION_NAME.replace(
      '"',
      '',
    ).replace('"', '')}.${APP_BUILD_VERSION}"\n`;

    infoJsEnv += data;

    execSync('rm -rf $TMPDIR/metro-*');

    writeFileSync(join('.base.env'), infoJsEnv, 'utf8');

    console.error('✨✨✨✨✨ SET UP Env done ✨✨✨✨✨');
  }
};

/**
 * @param {*} envPath string
 */
export const loadEnvFile = envPath => {
  const data = readFileSync(join('./', envPath), 'utf8');

  if (data) {
    let envDTS = "declare module '@env' {";
    const envJson = data.split('\n').reduce((prev, curr) => {
      const firstEqualSign = curr.indexOf('=');

      const key = curr.slice(0, firstEqualSign);

      const value = curr.slice(firstEqualSign + 1);

      if (key.trim().length <= 0 || key.includes('#')) {
        return prev;
      }

      envDTS += `\n  export const ${key}: string;`;

      prev[key] = value.replace('"', '').replace('"', '');

      return prev;
    }, {});

    envDTS += '\n  export const APP_BUILD_VERSION: string;';

    envDTS += '\n}\n';

    writeFileSync(join('declare', 'env.d.ts'), envDTS, 'utf8');

    console.log({envJson});

    return envJson;
  }

  return {};
};

/**
 * @param {*} envPath string
 */
const run = envPath => {
  const envJson = loadEnvFile(envPath);

  setupEnv(envPath, envJson);
};

(() => {
  const {argv} = process;

  const actualArgv = argv.slice(2);

  const [nameFunc, envPath] = actualArgv;

  switch (nameFunc) {
    case 'setupenv':
      run(envPath);

      break;

    default:
      break;
  }
})();

export {};
